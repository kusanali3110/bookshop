name: CI for Dev Branch

on:
  push:
    branches:
      - dev
  
permissions:
  contents: write

jobs:
  build-push-dev-images:
    if: github.actor != 'github-actions[bot]' && !contains(github.event.head_commit.message, 'ci(')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Detect changed services (in dev)
        id: detect
        run: |
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            changed_paths=$(git diff --name-only HEAD~1 HEAD)
          else
            changed_paths=$(git diff-tree --no-commit-id --name-only -r HEAD)
          fi
      
          services=()
          for path in $changed_paths; do
            dir="${path%%/*}"
            if [ -d "$dir" ] && [ -f "$dir/Dockerfile" ] && [ -f "$dir/VERSION" ]; then
              services+=("$dir")
            fi
          done
      
          unique_services=$(printf "%s\n" "${services[@]}" | sort -u)
          echo "Changed services: $unique_services"
          echo "changed_services=${unique_services}" >> $GITHUB_OUTPUT

      - name: Build, tag and push Docker images
        if: steps.detect.outputs.changed_services != ''
        run: |
          NOW=$(date +"%d%m%Y-%H-%M-%S")

          for service in ${{ steps.detect.outputs.changed_services }}; do
            if [ -f "$service/Dockerfile" ] && [ -f "$service/VERSION" ]; then
              echo "üîß Building $service..."

              # ƒê·ªçc phi√™n b·∫£n c≈© v√† tƒÉng patch
              version_line=$(cat $service/VERSION)
              version_clean=$(echo "$version_line" | sed 's/^v//' | cut -d- -f1)  # b·ªè "v" v√† timestamp
              IFS='.' read -r major minor patch <<< "$version_clean"
              new_patch=$((patch + 1))
              new_version="$major.$minor.$new_patch"
              image_tag="v$new_version-$NOW"

              echo "üì¶ New image tag for $service: $image_tag"

              # Ghi l·∫°i image tag v√†o file VERSION
              echo "$image_tag" > $service/VERSION

              # Commit VERSION m·ªõi
              git config user.name "github-actions"
              git config user.email "github-actions@github.com"
              git add $service/VERSION
              git commit -m "ci($service): bump version to $image_tag"
              git push origin dev

              # Build & push image
              docker build -t ${{ secrets.DOCKER_USERNAME }}/bookshop-$service:$image_tag ./$service
              docker push ${{ secrets.DOCKER_USERNAME }}/bookshop-$service:$image_tag
            else
              echo "‚ö†Ô∏è Skipping $service: missing Dockerfile or VERSION"
            fi
          done
